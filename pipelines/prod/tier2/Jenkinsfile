@Library('idm-ci')
import idmci.*

env.IDMCI_GITREPO = 'https://gitlab.cee.redhat.com/identity-management/idm-ci.git'
env.IPA_EMAIL = 'ipa-and-samba-team-automation@redhat.com'
env.ANSIBLE_GATHER_TIMEOUT = '60'

// syntax: cron(<minute> <hour> <day of month> <month> <day of week>) timezone: UTC
// details of jenkins cron sytax: https://jenkins.io/doc/book/pipeline/syntax/#cron-syntax
properties([pipelineTriggers([cron('30 20 * * 4')])])

node {
        stage("tier-2") {
          parallel(
            "pytest::external-trust": {
                new TeRun([
                    metadata: 'metadata/pytests/external-trust.yaml',
                    test: 'external-trust'
                ]).exec('ipa-slave')
            },
            "pytest::ipa-backup-restore": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-backup-restore.yaml',
                    test: 'ipa-backup-restore'
                ]).exec('ipa-slave')
            },
            "pytest::ipa-idoverride": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-idoverride.yaml',
                    test: 'ipa-idoverride'
                ]).exec('ipa-slave')
            },
            "pytest::ipa-nis-manage": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-nis-manage.yaml',
                    test: 'ipa-nis-manage'
                ]).exec('ipa-slave')
            },
            "pytest::ipa-services": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-services.yaml',
                    test: 'ipa-services'
                ]).exec('ipa-slave')
            },
            "pytest::ipa-sudo": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-sudo.yaml',
                    test: 'ipa-sudo'
                ]).exec('ipa-slave')
            },
            "pytest::ipa-upgrade": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-upgrade.yaml',
                    test: 'ipa-upgrade'
                ]).exec('ipa-slave')
            },
            "pytest::ipa-user": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-user.yaml',
                    test: 'ipa-user'
                ]).exec('ipa-slave')
            },
            "pytest::kdcproxy": {
                new TeRun([
                    metadata: 'metadata/pytests/kdcproxy.yaml',
                    test: 'kdcproxy'
                ]).exec('ipa-slave')
            },
            "pytest::replica-install": {
                new TeRun([
                    metadata: 'metadata/pytests/replica-install.yaml',
                    test: 'replica-install'
                ]).exec('ipa-slave')
            },
            "pytest::server-role": {
                new TeRun([
                    metadata: 'metadata/pytests/server-role.yaml',
                    test: 'server-role'
                ]).exec('ipa-slave')
            },
            "pytest::sudo-ipa-schema": {
                new TeRun([
                    metadata: 'metadata/pytests/sudo-ipa-schema.yaml',
                    test: 'sudo-ipa-schema'
                ]).exec('ipa-slave')
            },
            "pytest::trust-one-way": {
                new TeRun([
                    metadata: 'metadata/pytests/trust-one-way.yaml',
                    test: 'trust-one-way'
                ]).exec('ipa-slave')
            },
            "pytest::upn": {
                new TeRun([
                    metadata: 'metadata/pytests/upn.yaml',
                    test: 'upn'
                ]).exec('ipa-slave')
            },
            "pytest::vault": {
                new TeRun([
                    metadata: 'metadata/pytests/vault.yaml',
                    test: 'vault'
                ]).exec('ipa-slave')
            },
            "bash::ds-migration": {
                new TeRun([
                    metadata: 'metadata/ipatests/ds-migration.yaml',
                    test: 'ds-migration'
                ]).exec('ipa-slave')
            },
            "bash::ds-migration-func": {
                new TeRun([
                    metadata: 'metadata/ipatests/ds-migration-func.yaml',
                    test: 'ds-migration-func'
                ]).exec('ipa-slave')
            },
            "bash::ipa-client-cert": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-client-cert.yaml',
                    test: 'ipa-client-cert'
                ]).exec('ipa-slave')
            },
            "bash::install-client-cli": {
                new TeRun([
                    metadata: 'metadata/ipatests/install-client-cli.yaml',
                    test: 'install-client-cli'
                ]).exec('ipa-slave')
            },
            "bash::ipa-adtrust": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-adtrust.yaml',
                    test: 'ipa-adtrust'
                ]).exec('ipa-slave')
            },
            "bash::ipa-client-automount": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-client-automount.yaml',
                    test: 'ipa-client-automount'
                ]).exec('ipa-slave')
            },
            "bash::ipa-idrange-cli": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-idrange-cli.yaml',
                    test: 'ipa-idrange-cli'
                ]).exec('ipa-slave')
            },
            "bash::ipa-join": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-join.yaml',
                    test: 'ipa-join'
                ]).exec('ipa-slave')
            },
            "bash::ipa-krblockout": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-krblockout.yaml',
                    test: 'ipa-krblockout'
                ]).exec('ipa-slave')
            },
            "bash::ipa-nis-integration": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-nis-integration.yaml',
                    test: 'ipa-nis-integration'
                ]).exec('ipa-slave')
            },
            "bash::ipa-realmdomains-cli": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-realmdomains-cli.yaml',
                    test: 'ipa-realmdomains-cli'
                ]).exec('ipa-slave')
            },
            "bash::ipa-selinux-usermap-func": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-selinux-usermap-func.yaml',
                    test: 'ipa-selinux-usermap-func'
                ]).exec('ipa-slave')
            },
            "bash::ipa-trust-cli": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-trust-cli.yaml',
                    test: 'ipa-trust-cli'
                ]).exec('ipa-slave')
            },
            "bash::ipa-trust-func-hbac": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-trust-func-hbac.yaml',
                    test: 'ipa-trust-func-hbac'
                ]).exec('ipa-slave')
            },
            "bash::ipa-trust-func-httpkrb": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-trust-func-httpkrb.yaml',
                    test: 'ipa-trust-func-httpkrb'
                ]).exec('ipa-slave')
            },
            "bash::ipa-trust-func-selinux-usermap": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-trust-func-selinux-usermap.yaml',
                    test: 'ipa-trust-func-selinux-usermap'
                ]).exec('ipa-slave')
            },
            "bash::ipa-trust-func-automount": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-trust-func-automount.yaml',
                    test: 'ipa-trust-func-automount'
                ]).exec('ipa-slave')
            },
            "bash::ipa-trust-func-sudo": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-trust-func-sudo.yaml',
                    test: 'ipa-trust-func-sudo'
                ]).exec('ipa-slave')
            }
            )
        }
}
