@Library('idm-ci')
import idmci.*

env.IDMCI_GITREPO = 'https://gitlab.cee.redhat.com/identity-management/idm-ci.git'
env.IPA_EMAIL = 'ipa-and-samba-team-automation@redhat.com'
env.ANSIBLE_GATHER_TIMEOUT = '60'

node {
        stage("UNSTABLE") {
          parallel(
            "p1pytest::func-svcs": {
                new TeRun([
                    metadata: 'metadata/pytests/functional_services.yaml',
                    test: 'ipa-functional-services',
                ]).exec('ipa-slave')
            },
            "p1pytest::idoverride": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-idoverride.yaml',
                    test: 'ipa-idoverride',
                ]).exec('ipa-slave')
            },
            "p1pytest::rbac": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-rbac.yaml',
                    test: 'ipa-rbac',
                ]).exec('ipa-slave')
            },
            "p1pytest::idoverride": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-idoverride.yaml',
                    test: 'ipa-idoverride',
                ]).exec('ipa-slave')
            },
            "p1pytest::rbac": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-rbac.yaml',
                    test: 'ipa-rbac',
                ]).exec('ipa-slave')
            },
            "p1pytest::vault": {
                new TeRun([
                    metadata: 'metadata/pytests/vault.yaml',
                    test: 'vault',
                ]).exec('ipa-slave')
            },
            "p2pytest::external-trust": {
                new TeRun([
                    metadata: 'metadata/pytests/external-trust.yaml',
                    test: 'ipa-external-trust',
                ]).exec('ipa-slave')
            },
            "p2pytest::backup-restore": {
                new TeRun([
                    metadata: 'metadata/pytests/backup-restore.yaml',
                    test: 'ipa-backup-restore',
                ]).exec('ipa-slave')
            },
            "p2pytest::certprofile": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-certprofile.yaml',
                    test: 'ipa-certprofile',
                ]).exec('ipa-slave')
            },
            "p2pytest::kdcproxy": {
                new TeRun([
                    metadata: 'metadata/pytests/kdcproxy.yaml',
                    test: 'ipa-kdcproxy',
                ]).exec('ipa-slave')
            },
            "p2pytest::trust-one-way": {
                new TeRun([
                    metadata: 'metadata/pytests/trust-one-way.yaml',
                    test: 'ipa-trust-one-way',
                ]).exec('ipa-slave')
            },
            "p2pytest::upn": {
                new TeRun([
                    metadata: 'metadata/pytests/upn.yaml',
                    test: 'ipa-upn',
                ]).exec('ipa-slave')
            },
            "p2pytest::winsync-migrate": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-winsync-migrate.yaml',
                    test: 'ipa-winsync-migrate',
                ]).exec('ipa-slave')
            },
            "p2pytest::server-install": {
                new TeRun([
                    metadata: 'metadata/pytests/server-install.yaml',
                    test: 'ipa-server-install',
                ]).exec('ipa-slave')
            },
            "p2pytest::client-install": {
                new TeRun([
                    metadata: 'metadata/pytests/client-install.yaml',
                    test: 'ipa-client-install',
                ]).exec('ipa-slave')
            },
            "p2pytest::ipa-cert": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-cert.yaml',
                    test: 'ipa-cert',
                ]).exec('ipa-slave')
            },
            "p2pytest::getcert": {
		new TeRun([
                    metadata: 'metadata/pytests/ipa-getcert.yaml',
                    test: 'ipa-getcert',
		]).exec('ipa-slave')
            },
            "p2pytest::services": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-services.yaml',
                    test: 'ipa-services',
                ]).exec('ipa-slave')
            },
            "p2pytest::sudo": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-sudo.yaml',
                    test: 'ipa-sudo',
                ]).exec('ipa-slave')
            },
            "p2pytest::user": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-user.yaml',
                    test: 'ipa-user',
                ]).exec('ipa-slave')
            },
            "p2bash::krblockout": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-krblockout.yaml',
                    test: 'ipa-krblockout',
                ]).exec('ipa-slave')
            },
            "p2bash::client-cert": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-client-cert.yaml',
                    test: 'ipa-client-cert',
                ]).exec('ipa-slave')
            },
            "p2bash::idoverride": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-idoverride.yaml',
                    test: 'ipa-idoverride',
                ]).exec('ipa-slave')
            },
            "p2bash::client-automount": {
                new TeRun([
                    metadata: 'metadata/ipatests/ipa-client-automount.yaml',
                    test: 'ipa-client-automount',
                ]).exec('ipa-slave')
            },
            "p3pytest::performance-tests": {
                new TeRun([
                    metadata: 'metadata/pytests/performance-tests.yaml',
                    test: 'ipa-performance-tests',
                ]).exec('ipa-slave')
            },
            "p3pytest::ipa-server-docker": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-server-docker.yaml',
                    test: 'ipa-server-docker',
                ]).exec('ipa-slave')
            },
            "p3pytest::sssd-container": {
                new TeRun([
                    metadata: 'metadata/pytests/sssd-container.yaml',
                    test: 'ipa-sssd-container',
                ]).exec('ipa-slave')
            },
            "p3pytest::dns-services": {
                new TeRun([
                    metadata: 'metadata/pytests/dns-services.yaml',
                    test: 'ipa-dns-services',
                ]).exec('ipa-slave')
            },
            "p3pytest::advise": {
                new TeRun([
                    metadata: 'metadata/pytests/advise.yaml',
                    test: 'ipa-advise',
                ]).exec('ipa-slave')
            },
            "p3pytest::hbac": {
                new TeRun([
                    metadata: 'metadata/pytests/hbac.yaml',
                    test: 'ipa-hbac',
                ]).exec('ipa-slave')
            },
            "p3pytest::host": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-host.yaml',
                    test: 'ipa-host',
                ]).exec('ipa-slave')
            },
            "p3pytest::ipa-nis-manage": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-nis-manage.yaml',
                    test: 'ipa-nis-manage',
                ]).exec('ipa-slave')
            },
            "p3pytest::ipv6": {
                new TeRun([
                    metadata: 'metadata/pytests/ipv6.yaml',
                    test: 'ipa-ipv6',
                ]).exec('ipa-slave')
            },
            "p3pytest::server-role": {
                new TeRun([
                    metadata: 'metadata/pytests/server-role.yaml',
                    test: 'ipa-server-role',
                ]).exec('ipa-slave')
            },
            "p3pytest::sudo-ipa-schema": {
                new TeRun([
                    metadata: 'metadata/pytests/sudo-ipa-schema.yaml',
                    test: 'ipa-sudo-ipa-schema',
                ]).exec('ipa-slave')
            }
            )
        }
}
