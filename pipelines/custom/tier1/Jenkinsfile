@Library('idm-ci')
import idmci.*

env.IDMCI_GITREPO = 'https://gitlab.cee.redhat.com/identity-management/idm-ci.git'
env.IDMCI_BRANCH = 'production'
env.IPA_EMAIL = 'ipa-and-samba-team-automation@redhat.com'
env.ANSIBLE_GATHER_TIMEOUT = '60'

def IPATESTS_METADATA_PATH = 'https://gitlab.cee.redhat.com/identity-management/ipa-tests/raw/master'

node {
        stage("tier-1") {
          parallel(
            "bash::ipa-automember": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-automember.yaml",
                    test: 'ipa-automember'
                ]).exec('ipa-slave')
            },
            "bash::ipa-automount": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-automount.yaml",
                    test: 'ipa-automount'
                ]).exec('ipa-slave')
            },
            "bash::ipa-config": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-config.yaml",
                    test: 'ipa-config'
                ]).exec('ipa-slave')
            },
            "bash::cert": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-cert.yaml",
                    test: 'ipa-cert'
                ]).exec('ipa-slave')
            },
            "bash::ipa-ctl": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-ctl.yaml",
                    test: 'ipa-ctl'
                ]).exec('ipa-slave')
            },
            "bash::ipa-default": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-default.yaml",
                    test: 'ipa-default'
                ]).exec('ipa-slave')
            },
            "bash::ipa-delegation-cli": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-delegation-cli.yaml",
                    test: 'ipa-delegation-cli'
                ]).exec('ipa-slave')
            },
            "bash::dns": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-dns.yaml",
                    test: 'ipa-dns'
                ]).exec('ipa-slave')
            },
            "bash::getcert": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-getcert.yaml",
                    test: 'ipa-getcert'
                ]).exec('ipa-slave')
            },
            "bash::ipa-get-rm-keytab": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-get-rm-keytab.yaml",
                    test: 'ipa-get-rm-keytab'
                ]).exec('ipa-slave')
            },
            "bash::ipa-group-cli": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-group-cli.yaml",
                    test: 'ipa-group-cli'
                ]).exec('ipa-slave')
            },
            "bash::ipa-hbac-cli": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-hbac-cli.yaml",
                    test: 'ipa-hbac-cli'
                ]).exec('ipa-slave')
            },
            "bash::ipa-hbac-func": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-hbac-func.yaml",
                    test: 'ipa-hbac-func'
                ]).exec('ipa-slave')
            },
            "bash::ipa-hbacsvc-cli": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-hbacsvc-cli.yaml",
                    test: 'ipa-hbacsvc-cli'
                ]).exec('ipa-slave')
            },
            "bash::ipa-host-cli": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-host-cli.yaml",
                    test: 'ipa-host-cli'
                ]).exec('ipa-slave')
            },
            "bash::ipa-hostgroup-cli": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-hostgroup-cli.yaml",
                    test: 'ipa-hostgroup-cli'
                ]).exec('ipa-slave')
            },
            "bash::ipa-i18n": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-i18n.yaml",
                    test: 'ipa-i18n'
                ]).exec('ipa-slave')
            },
            "bash::krbtpolicy": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-krbtpolicy.yaml",
                    test: 'ipa-krbtpolicy'
                ]).exec('ipa-slave')
            },
            "bash::ipa-migration": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-migration.yaml",
                    test: 'ipa-migration'
                ]).exec('ipa-slave')
            },
            "bash::ipa-netgroup-cli": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-netgroup-cli.yaml",
                    test: 'ipa-netgroup-cli'
                ]).exec('ipa-slave')
            },
            "bash::password": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-password.yaml",
                    test: 'ipa-password'
                ]).exec('ipa-slave')
            },
            "bash::ipa-selfservice": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-selfservice.yaml",
                    test: 'ipa-selfservice'
                ]).exec('ipa-slave')
            },
            "bash::ipa-selinuxusermap-cli": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-selinuxusermap-cli.yaml",
                    test: 'ipa-selinuxusermap-cli'
                ]).exec('ipa-slave')
            },
            "bash::ipa-services": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-services.yaml",
                    test: 'ipa-services'
                ]).exec('ipa-slave')
            },
            "bash::ssh-functional": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-ssh-functional.yaml",
                    test: 'ipa-ssh-functional'
                ]).exec('ipa-slave')
            },
            "bash::sudo": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-sudo.yaml",
                    test: 'ipa-sudo'
                ]).exec('ipa-slave')
            },
            "bash::trust-functional-ssh": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-trust-func-ssh.yaml",
                    test: 'ipa-trust-functional-ssh'
                ]).exec('ipa-slave')
            },
            "bash::trust-functional-user": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-trust-func-user.yaml",
                    test: 'ipa-trust-functional-user'
                ]).exec('ipa-slave')
            },
            "bash::ipa-upgrade": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-upgrade.yaml",
                    test: 'ipa-upgrade'
                ]).exec('ipa-slave')
            },
            "bash::user-cli-adduser": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-user-cli-adduser.yaml",
                    test: 'ipa-user-cli-adduser'
                ]).exec('ipa-slave')
            },
            "bash::user-cli-moduser": {
                new TeRun([
                    metadata: "${IPATESTS_METADATA_PATH}/metadata/ipa-user-cli-moduser.yaml",
                    test: 'ipa-user-cli-moduser'
                ]).exec('ipa-slave')
            },
            "pytest::client-install": {
                new TeRun([
                    metadata: 'metadata/pytests/client-install.yaml',
                    test: 'client-install',
                ]).exec('ipa-slave')
            },
            "pytest::dns-services": {
                new TeRun([
                    metadata: 'metadata/pytests/dns-services.yaml',
                    test: 'dns-services',
                ]).exec('ipa-slave')
            },
            "pytest::external-ca": {
                new TeRun([
                    metadata: 'metadata/pytests/external-ca.yaml',
                    test: 'ipa-external-ca',
                ]).exec('ipa-slave')
            },
            "pytest::func-svcs": {
                new TeRun([
                    metadata: 'metadata/pytests/functional-services.yaml',
                    test: 'ipa-functional-services',
                ]).exec('ipa-slave')
            },
            "pytest::ipa-advise": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-advise.yaml',
                    test: 'ipa-advise',
                ]).exec('ipa-slave')
            },
            "pytest::ipa-cert": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-cert.yaml',
                    test: 'ipa-cert',
                ]).exec('ipa-slave')
            },
            "pytest::ipa-certprofile": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-certprofile.yaml',
                    test: 'ipa-certprofile',
                ]).exec('ipa-slave')
            },
            "pytest::ipa-getcert": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-getcert.yaml',
                    test: 'ipa-getcert',
                ]).exec('ipa-slave')
            },
            "pytest::ipa-hbac": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-hbac.yaml',
                    test: 'ipa-hbac',
                ]).exec('ipa-slave')
            },
            "pytest::ipa-hosts": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-host.yaml',
                    test: 'pytests-ipa-host'
                ]).exec('ipa-slave')
            },
            "pytest::ipa-rbac": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-rbac.yaml',
                    test: 'ipa-rbac',
                ]).exec('ipa-slave')
            },
            "pytest::replica-promotion": {
                new TeRun([
                    metadata: 'metadata/pytests/ipa-replica-promotion.yaml',
                    test: 'ipa-replica-promotion',
                ]).exec('ipa-slave')
            },
            "pytest::otp": {
                new TeRun([
                    metadata: 'metadata/pytests/otp.yaml',
                    test: 'otp',
                ]).exec('ipa-slave')
            },
            "pytest::subca": {
                new TeRun([
                    metadata: 'metadata/pytests/subca.yaml',
                    test: 'ipa-subca',
                ]).exec('ipa-slave')
            },
            "upstream::advise": {
                new TeRun([
                    metadata: 'metadata/upstream/integration/advise.yaml',
                    test: 'upstream-advise'
                ]).exec('ipa-slave')
            },
            "upstream::authselect": {
                new TeRun([
                    metadata: 'metadata/upstream/integration/authselect.yaml',
                    test: 'upstream-authselect'
                ]).exec('ipa-slave')
            },
            "upstream::caless-TestServerInstall": {
                new TeRun([
                    metadata: 'metadata/upstream/integration/caless-TestServerInstall.yaml',
                    test: 'upstream-caless-TestServerInstall'
                ]).exec('ipa-slave')
            },
            "upstream::caless-TestReplicaInstall": {
                new TeRun([
                    metadata: 'metadata/upstream/integration/caless-TestReplicaInstall.yaml',
                    test: 'upstream-caless-TestReplicaInstall'
                ]).exec('ipa-slave')
            },
             "upstream::commands": {
                new TeRun([
                    metadata: 'metadata/upstream/integration/commands.yaml',
                    test: 'upstream-commands'
                ]).exec('ipa-slave')
            },
            "upstream::nfs": {
                new TeRun([
                    metadata: 'metadata/upstream/integration/nfs.yaml',
                    test: 'upstream-nfs'
                ]).exec('ipa-slave')
            },
            "upstream::pki-config-override": {
                new TeRun([
                    metadata: 'metadata/upstream/integration/pki-config-override.yaml',
                    test: 'upstream-pki-config-override'
                ]).exec('ipa-slave')
            }
            )
        }
}
