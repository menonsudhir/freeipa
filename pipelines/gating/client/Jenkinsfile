@Library('idm-ci')
import idmci.*

env.IDMCI_GITREPO = 'https://gitlab.cee.redhat.com/identity-management/idm-ci.git'
env.IDMCI_BRANCH = 'production'
env.IPA_EMAIL = 'ipa-and-samba-team-automation@redhat.com'
env.ANSIBLE_GATHER_TIMEOUT = '60'
env.VERSION = 'RHEL8.1'
env.TYPE = 'client-stream.tier1'

// Gating env vars
env.CI_NAME = 'IdM IPA CI'
env.CI_TEAM = 'IdM Eagle Team'
env.CI_DOCS = 'https://gitlab.cee.redhat.com/identity-management/idm-ci/blob/master/doc/user-doc.md'
env.CI_IRC = '#ipa'
env.CI_EMAIL = 'ipa-and-samba-team-automation@redhat.com'
env.ARTIFACT_NAMESPACE = 'idm-ci.redhat-module'

properties([
    parameters([
    string(name: 'CI_MESSAGE', defaultValue: '', description: 'CI_MESSAGE'),
    string(name: 'MESSAGE_HEADERS', defaultValue: '', description: 'MESSAGE_HEADERS'),
    booleanParam(name: 'SKIP_UMB_MSG', defaultValue: true, description: 'True will cause no UMB messages.'),
    booleanParam(name: 'NOTIFY_PACKAGER', defaultValue: false, description: 'Notify packager about this jenkins build.'),
    booleanParam(name: 'DEBUG', defaultValue: false, description: 'Will printout debug information.'),
    ]),
    pipelineTriggers([
    [
        $class: 'CIBuildTrigger',
        noSquash: false,
        providerData: [
        $class: 'ActiveMQSubscriberProviderData',
        checks: [
            [
            expectedValue: 'installability',
            field: 'type'
            ],
            [
            expectedValue: 'idm',
            field: 'artifact.name'
            ],
            [
            expectedValue: 'client',
            field: 'artifact.stream'
            ],
            [
            expectedValue: 'passed',
            field: 'status'
            ]
        ],
        name: 'Red Hat UMB',
        overrides: [
            topic: 'Consumer.rh-jenkins-ci-plugin.65ef218a-b2e3-4999-ba81-ade6448bcdca.VirtualTopic.eng.ci.redhat-module.test.complete'
        ],
        selector: '',
        timeout: null
        ]
    ]
    ])
])

node {
  def g = new idmci.gating.gating()
  // We init an in-progress message to be published as soon as this pipeline is triggered
  g.sendMessage('running')
  try {
        stage("tier-1") {
          parallel(
          "pytest::functional-services": {
                new TeRun([
                    metadata: 'metadata/pytests/functional-services.yaml',
                    test: 'pytests-functional-services',
                    message: "${params.CI_MESSAGE}"
                ]).exec('ipa-slave')
            }
            )
        }
   } catch (e) {
     throw e
     // We send failing message here
     g.sendMessage('error')
   } finally {
     // We send a passing message here
     g.sendMessage('complete')
  }
}
